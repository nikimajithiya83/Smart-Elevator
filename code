import cv2
import numpy as np
import threading
import time
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

#Neural Network
class ElevatorModel(nn.Module):
    def __init__(self):
        super(ElevatorModel, self).__init__()
        self.fc1 = nn.Linear(4, 64)
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, 3)
    
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

class PriorityQueue:
    def __init__(self):
        self.queue = []

    def put(self, item, priority):
        self.queue.append((priority, item))
        self.queue.sort(reverse=True)

    def get(self):
        return self.queue.pop(0)[1] if self.queue else None

class ElevatorThread(threading.Thread):
    def __init__(self, elevator_id, request_queue, model):
        threading.Thread.__init__(self)
        self.elevator_id = elevator_id
        self.request_queue = request_queue
        self.model = model

    def run(self):
        while True:
            request = self.request_queue.get()
            if request is None:
                break
            print(f"Elevator {self.elevator_id} processing request: {request}")
            time.sleep(1)

# Training setup 
data = np.array([[1, 5, 3, 10], [4, 9, 2, 5], [2, 7, 1, 15]])
labels = np.array([0, 1, 2])
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = ElevatorModel()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.long)

cycles = 100
for cycle in range(cycles):
    model.train()
    optimizer.zero_grad()
    outputs = model(X_train_tensor)
    loss = criterion(outputs, y_train_tensor)
    loss.backward()
    optimizer.step()
    if (cycle + 1) % 10 == 0:
        print(f'Cycle [{cycle+1}/{cycles}], Loss: {loss.item():.4f}')
#DNN face detection model for facial recognition
modelFile = r"C:\Users\HP\OneDrive\Desktop\res10_300x300_ssd_iter_140000.caffemodel"
configFile = r"C:\Users\HP\OneDrive\Desktop\deploy.prototxt"
net = cv2.dnn.readNetFromCaffe(configFile, modelFile)

# Elevator threading
request_queue = PriorityQueue()
num_elevators = 2
elevator_threads = []
for i in range(num_elevators):
    thread = ElevatorThread(i, request_queue, model)
    thread.start()
    elevator_threads.append(thread)

# Video capture
cap = cv2.VideoCapture(0)
button_active = True

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break
    blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)), 1.0, (300, 300), (104.0, 177.0, 123.0))
    net.setInput(blob)
    detections = net.forward()
    
    faces_detected = False
    for i in range(detections.shape[2]):
        confidence = detections[0, 0, i, 2]
        if confidence > 0.5:
            faces_detected = True
            box = detections[0, 0, i, 3:7] * np.array([frame.shape[1], frame.shape[0], frame.shape[1], frame.shape[0]])
            (x, y, x1, y1) = box.astype("int")
            cv2.rectangle(frame, (x, y), (x1, y1), (255, 0, 0), 2)

    if faces_detected:
        button_active = True
        print("Lift call button is active.")
    else:
        button_active = False
        print("Lift call button is deactivated.")

    #frame
    cv2.imshow('Face Detection Frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
